/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.elasticsearch.search.api.facade;

import com.elasticsearch.search.api.model.Error;
import com.elasticsearch.search.api.model.Results;
import com.elasticsearch.search.api.model.SearchRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-31T00:05:06.549673800-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "search", description = "the search API")
public interface SearchApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /search : Submits a query to Elasticsearch
     *
     * @param searchRequest  (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 500)
     */
    @ApiOperation(value = "Submits a query to Elasticsearch", nickname = "search", notes = "", response = Results.class, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Results.class),
        @ApiResponse(code = 500, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default CompletableFuture<ResponseEntity<Results>> search(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SearchRequest searchRequest) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"resultsList\" : [ { \"highlightedContent\" : \"highlightedContent\", \"title\" : \"title\", \"url\" : \"url\", \"content\" : \"content\" }, { \"highlightedContent\" : \"highlightedContent\", \"title\" : \"title\", \"url\" : \"url\", \"content\" : \"content\" } ], \"totalResults\" : 0, \"itemsPerPage\" : 1, \"suggestions\" : [ \"suggestions\", \"suggestions\" ], \"page\" : 6 }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }

}
